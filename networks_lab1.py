# -*- coding: utf-8 -*-
"""Networks_LAB1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1z5PRWdiaMc75-K54MdN-sBw0petvArw1
"""

pip install nslookup

pip install dnspython

"""FOR IP ADDRESS"""

import dns.resolver
from nslookup import Nslookup
import dns.flags

domain=input()

result = dns.resolver.resolve(domain,'A')
for ipval in result:
    print('IP', ipval.to_text())

"""FOR CNAME"""

try:
  result1  = dns.resolver.resolve(domain,'CNAME')
  for cnameval in result1:
      print (' CNAME target address:', cnameval.target)
except:
   print("Not Available")

"""FOR MX RECORD"""

try:
  result1  = dns.resolver.resolve(domain,'MX')
  for cnameval in result1:
      print (' MX target address:', cnameval.target)
except:
   print("Not Available")

"""FOR AAA"""

try:
  answer = dns.resolver.resolve(domain,"AAA")
  for aaa in answer:
    print('AAA', ns.to_text())
except:
  print("Not Available")

"""FOR NS"""

try:
  answer = dns.resolver.resolve(domain,"NS")
  for ns in answer:
    print(ns.to_text())
except:
  print("Not Available")

"""FOR TXT"""

try:
  answer = dns.resolver.resolve(domain,"TXT")
  for txt in answer:
    print('TXT', txt.to_text())
except:
  print("Not Available")

"""FOR SOA"""

try:
  answer = dns.resolver.resolve(domain,"SOA")
  for soa in answer:
    print('SOA', txt.to_text())
except:
  print("Not Available")

pip install tld

"""ROOT NAME SERVER"""

from tld import get_tld
url = 'https://www.google.com' #URL to strip. Change this URL to whatever you want.
res = get_tld(url, as_object=True) #Get the root as an object
print (res.fld) #res.fld to extract the domain

"""TLD Name Server"""

from tld import get_tld
# 'co.uk'
print(get_tld("http://www.google.com", fail_silently=True))

"""Authoritative Name Server(NS)"""

import dns.resolver
import dns.reversename


domain_address = dns.reversename.from_address('8.8.4.4')
# <DNS name 4.4.8.8.in-addr.arpa.>

domain_name = str(dns.resolver.resolve(domain_address, 'PTR')[0])
print(domain_name)

"""QUERIES USING DIFFERENT SERVER"""

import dns.resolver
ans=""
my_resolver = dns.resolver.Resolver()

# 8.8.8.8 is Google's public DNS server
my_resolver.nameservers = ['8.8.8.8']

answer = my_resolver.resolve('myntra.com','A')
ans=ans+answer.rrset.to_text()
print(ans)

pip install icmplib

from icmplib import ping, multiping, traceroute, Host, Hop
hops = traceroute('1.1.1.1')
last_distance = 0
for hop in hops:
     if last_distance + 1 != hop.distance:
         print('Some routers are not responding')
     # See the Hop class for details
     print(f'{hop.distance}    {hop.address}    {hop.avg_rtt} ms')
     last_distance = hop.distance

"""FUNCTIONS FOR GUI"""

def ipInfo(addr):
    ans=""
    from urllib.request import urlopen
    from json import load
    if addr == '':
        url = 'https://ipinfo.io/json'
    else  :
        url = 'https://ipinfo.io/' + addr + '/json'
    res = urlopen(url)
    #response from url(if res==None then check connection)
    data = load(res)
    #will load the json response into data
    for attr in data.keys():
        #will print the data line by line
        ans=ans+attr+" -> "+data[attr]+"\n"
    return ans
ipInfo(addr='216.239.63.236')

pip install gradio

"""FOR PTR RECORD"""

import dns.resolver
import dns.reversename
def IPfunction(IPad,IPlist):
  ans=""
  if IPad=="":
    return "IP address not entered!"
  if len(IPlist)==0:
    return "None selected"
  for i in IPlist:
    if i=="PTR Record":
      ans=ans+"PTR Record"+"\n"
      try:
        domain_address = dns.reversename.from_address(IPad)
# <DNS name 4.4.8.8.in-addr.arpa.>
        ans=ans+str(dns.resolver.resolve(domain_address, 'PTR')[0])+"\n"
      except:
        ans="NOT AVAILABLE"+"\n"
    elif i=='Trace IP':
      ans=ans+"Trace IP"+"\n"
      ans=ans+ipInfo(IPad)
  return ans

"""FOR WHO IS RECORDS"""

pip install python-whois

# pip install python-whois
def is_registered(domain_name):
    import whois
    """
    A function that returns a boolean indicating 
    whether a `domain_name` is registered
    """
    try:
        w = whois.whois(domain_name)
    except Exception:
        return False
    return bool(w.domain_name)

is_registered("google.com")

#domain_name="iitjammu.ac.in"

def whois_function(domain_name):
  import whois 
  if domain_name=="":
    return "WHOIS input is empty!!"
  if is_registered(domain_name):
    return (str(whois.whois(domain_name)))
  else:
    return "Domain not Registered"

pip install icmplib



def traceroute_function(domain):
  import socket
  from icmplib import ping, multiping, traceroute, Host, Hop
  ip=str(socket.gethostbyname(domain))
  hops =traceroute("157.240.210.35", count=3, interval=0.05, timeout=2, traffic_class=0, max_hops=30)
  last_distance = 0
  ans=""
  for hop in hops:
     if last_distance + 1 != hop.distance:
         ans=ans+'Some routers are not responding'+"\n"
     # See the Hop class for details
     ans=ans+" "+str(hop.distance)+" "+hop.address+" "+str(hop.avg_rtt)+" ms"+"\n"
     last_distance = hop.distance
  return ans

domain="www.google.com"
response = None
            # create the query
query = dns.message.make_query(domain, dns.rdatatype.A, dns.rdataclass.IN)
            # unset the recurse flag 
query.flags ^= dns.flags.RD

try:
    response = dns.query.udp(query, "8.8.8.8")
except :
    response = []

print(response.to_text())

print(int(dns.flags.RA))

pip install scapy

from scapy.all import *

def other_function(Domain,Other):
  if Domain=="":
    return "Domain name not entered"
  if len(Other)==0:
    return "No functionalities selected"
  ans=""
  for i in Other:
    if i=="WHO IS":
      ans=ans+"WHO IS"+"\n"
      ans=ans+whois_function(Domain)+"\n"
    elif i=="Trace Route":
      ans=ans+"Trace Route"+"\n"
      ans=ans+traceroute_function(Domain)+"\n"
  return ans

"""FOR CHANGING THE SERVER FOR QUERY"""

import dns.resolver
def server_query(domain,server,Records):
  if domain=="":
    return "Domain name not Entered!"
  ans=""
  if server=="Google Public DNS":
    server_ip="8.8.8.8"
  elif server=="OpenDNS":
    server_ip="208.67.222.222"
  elif server=="Cloudflare":
    server_ip="1.1.1.1"
  elif server=="Comodo Secure DNS":
    server_ip=" 8.26.56.26"
  """elif server=="Quad9":
    server_ip=" 149.112.112.112"
  elif server=="Verisign DNS":
    server_ip=" 64.6.64.6"""""
  my_resolver = dns.resolver.Resolver()
# 8.8.8.8 is Google's public DNS server
  my_resolver.nameservers = [server_ip]
  if len(Records)==0:
    return "No record is selected"
  for rec in Records:
    try:
      answer = my_resolver.resolve(domain,rec)
      ans=ans+answer.rrset.to_text()+"\n"
    except:
      ans=ans+rec+" Not Available through this server"+"\n"
  return(ans)

#server_query("www.google.com","8.8.8.8")

"""GREETING FUNCTION"""

def greet():
  s="Hello New User!!....Welcome to our DNS Record query platform"+ "\n"+ "Here you can do many things! like... \n 1. Give a domain name to fetch it's various DNS records.\n    A: Gives Ipv4 and TTL \n    AAAA: Gives IPv6 and TTL \n    CNAME: Gives alias name and TTL\n    MX:'mail exchange' (MX) record directs email to a mail server, has priority number, email id and TTL\n    SOA:‘start of authority’ (SOA) record stores important information about a domain or zone like MNAME, RNAME, SERIAL, RETRY, REFRESH, EXPIRE and TTL\n    NS:nameserver record indicates which DNS server is authoritative for that domain and NS records can never point to a canonical name (CNAME) record.\n    TXT: This record lets a domain administrator enter text into the DNS \n 2. You can also see the inputs obtained by the DNS resolver when it goes to different name servers \n 3. If you can memorize ;P then give us an IP address and we'll fetch PTR records and the trace IP for you \n 4. You can even try WHO IS to know the complete features of a domain \n 5. Knowing the query results from different DNS servers is also possible!"
  return s

"""MAIN ANSWER FUNCTION"""

def answer_question(Domain,Records,Resolver,IPaddress,IPoptions,Other,Servers):
  rec=""
  res=""
  if Domain=="":
    return (greet(),"Domain Name not entered","Domain Name not entered",IPfunction(IPaddress,IPoptions),other_function(Domain,Other),server_query(Domain,Servers,Records))
  if len(Records)==0:
    rec= "No record is selected"
  else:
    for qtype in Records:
        answer = dns.resolver.resolve(Domain,qtype, raise_on_no_answer=False)
        if answer.rrset is not None:
          rec=rec+answer.rrset.to_text()+"\n"
        else:
          rec=rec+qtype+" NOT AVAILABLE"+"\n"
  dict,
  if len(Resolver)==0:
    res="No queries from Resolver"
  else:
    for qtype in Resolver:
      if (qtype=="Root name servers"):
        res=res+"Root name servers"+"\n"
        from tld import get_tld
        url = 'https://'+Domain #URL to strip. Change this URL to whatever you want.
        res = res+(get_tld(url, as_object=True).fld)+"\n" #Get the root as an object
        #print (res.fld) #res.fld to extract the domain
      if (qtype=="Top Level Domain"):
        res=res+"Top Level Domains"+"\n"
        from tld import get_tld
        res=res+get_tld("http://"+Domain, fail_silently=True)+"\n"
      if (qtype=="Authoritative name server"):
        res=res+"Authoritative name server"+"\n"
        try:
          answer = dns.resolver.resolve(Domain,"NS")
          for ns in answer:
            res=res+ns.to_text()+"\n"
        except:
            res=res+"Not Available"+"\n"

  return (greet(),rec,res,IPfunction(IPaddress,IPoptions),other_function(Domain,Other),server_query(Domain,Servers,Records))

#answer_question("www.google.com",["MX"])

import gradio

Records=gradio.inputs.CheckboxGroup(['A', 'AAAA', 'CNAME','MX', 'NS', 'SOA', 'TXT'])
Resolver=gradio.inputs.CheckboxGroup(["Root name servers","Top Level Domain","Authoritative name server"],label="Name Server")
IP_options=gradio.inputs.CheckboxGroup(['PTR Record', 'Trace IP'],label="From IP Address")
Other=gradio.inputs.CheckboxGroup(['WHO IS', 'Trace Route'],label="Other functionalities")
Servers=gradio.inputs.Dropdown(["Google Public DNS","OpenDNS","Cloudflare","Comodo Secure DNS"], label="Server for query")
gradio.Interface(fn=answer_question,allow_flagging=False, inputs=["text",Records,Resolver,"text",IP_options,Other,Servers], outputs=[gradio.outputs.Textbox(type="auto", label="INTRO FOR YOU!! Just give a domain hit submit!"),gradio.outputs.Textbox(type="auto", label="Records selected output"),gradio.outputs.Textbox(type="auto", label="DNS Query output"),gradio.outputs.Textbox(type="auto", label="FRom IP Address"),gradio.outputs.Textbox(type="auto", label="Other Functions OUTPUT"),gradio.outputs.Textbox(type="auto", label="Query from Server output")]
).launch()